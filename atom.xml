<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hlx</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://inmyai.com/"/>
  <updated>2018-05-02T03:05:41.626Z</updated>
  <id>http://inmyai.com/</id>
  
  <author>
    <name>hlx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>入门Java:Raw Type(原生态类型)</title>
    <link href="http://inmyai.com/2018/05/01/%E5%85%A5%E9%97%A8Java-Row-Types-%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%9E%8B/"/>
    <id>http://inmyai.com/2018/05/01/入门Java-Row-Types-原生类型/</id>
    <published>2018-05-01T15:30:02.000Z</published>
    <updated>2018-05-02T03:05:41.626Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方定义"><a href="#官方定义" class="headerlink" title="官方定义"></a>官方定义</h2><p>A raw type is the name of a generic class or interface without any type of arguements<br>生的类型？还没煮熟？原生态类型是没有任何类型参数的泛型类或泛型接口的名字</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List rawList = new ArrayList();</span><br></pre></td></tr></table></figure><ul><li>List = 没有类型参数的泛型接口</li><li>ArrayList = 没有类型参数的泛型类</li><li>两者都是原生态类型</li><li>注意：非泛型的类或泛型接口都不是原生态类型</li></ul><h2 id="存在的意义"><a href="#存在的意义" class="headerlink" title="存在的意义"></a>存在的意义</h2><ul><li>JAVA 1.5之前，没有泛型机制，只能编写原生态类型</li><li>为了向后兼容(Backward Compatibility)，或者是移植兼容性(Migration Compatibility)，现在仍然支持原生态类型。例如，可以assign一个类型参数给原生态类型</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="1-类文字-class-literal"><a href="#1-类文字-class-literal" class="headerlink" title="1.类文字(class literal)"></a>1.类文字(class literal)</h3><p>类文字中必须使用原生态类型，规范不允许使用参数化类型。就是一个规定！例如，不能使用<code>List&lt;String&gt;.class</code>，而必须用<code>List.class</code>。可能就是为了简便吧。<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class test = List&lt;String&gt;.class;</span><br><span class="line">ERROR：</span><br><span class="line">    Cannot select from parameterized type</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class test = List.class; //打勾</span><br></pre></td></tr></table></figure><h3 id="2-实例-instance-操作符"><a href="#2-实例-instance-操作符" class="headerlink" title="2.实例(instance)操作符"></a>2.实例(instance)操作符</h3><p>禁止在参数化类型(parameterized type)上使用instanceof。这也是一个规定！<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List test = new ArrayList();</span><br><span class="line">if (test instanceof ArrayList&lt;String&gt;) &#123;</span><br><span class="line">    System.out.println(&quot;bingo~&quot;);</span><br><span class="line">&#125;</span><br><span class="line">ERROR:</span><br><span class="line">    Illegal generic type for instanceof</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List test = new ArrayList();</span><br><span class="line">if (test instanceof ArrayList) &#123;</span><br><span class="line">    System.out.println(&quot;bingo~&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//打勾</span><br></pre></td></tr></table></figure><p>两者都是因为<strong>泛型信息在运行期间被erasure</strong>这一事实(来源自《Effective Java》)。既然被erasure，那么<code>List&lt;String&gt;.class</code> == <code>List.class</code>，为啥是非法的？？有待考量，TODO:为啥非法。博主认为就应该只是一个规定的问题。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h3 id="1-安全性"><a href="#1-安全性" class="headerlink" title="1.安全性"></a>1.安全性</h3><p>原生类型没有类型参数，导致编译器缺少足够的信息，绕过泛型检查，会引起<code>unchecked error</code>。例如，对原生态类型操作时，容易引发<code>ClassCastException</code><br>示例:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class App &#123;</span><br><span class="line"></span><br><span class="line">    public void add(List list, Object object) &#123;</span><br><span class="line">        list.add(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        List&lt;Integer&gt; integerList = new ArrayList&lt;&gt;();</span><br><span class="line">        new App().add(integerList,new Date());</span><br><span class="line">        Integer element = integerList.get(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>add(List list, Object object)</code>能够通过编译，由于原生态类型没有<code>parameterized type</code>，因此，任何object都能够添加，但会引发编译警告<code>Unchecked call to &#39;add(E)&#39; as a member of raw type &#39;java.util.List&#39;</code>。<br>当尝试从<code>integerList</code>获取<code>element</code>时，将会付出忽略警告的代价，抛出<code>java.lang.ClassCastException: java.util.Date cannot be cast to java.lang.Integer</code></p><h3 id="2-阅读性"><a href="#2-阅读性" class="headerlink" title="2.阅读性"></a>2.阅读性</h3><p>原生态类型没有<code>parameterized type</code>，无法直接从表面上看出这个类型所包含的具体信息。而对于泛型类，如<code>List&lt;String&gt;</code>，可以简单的认为这是字符串列表。阅读性的丧失，将会导致代码的维护难度大大提高。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;官方定义&quot;&gt;&lt;a href=&quot;#官方定义&quot; class=&quot;headerlink&quot; title=&quot;官方定义&quot;&gt;&lt;/a&gt;官方定义&lt;/h2&gt;&lt;p&gt;A raw type is the name of a generic class or interface without
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo Admin Deploy扩展教程</title>
    <link href="http://inmyai.com/2018/05/01/Hexo-Admin-Deploy%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <id>http://inmyai.com/2018/05/01/Hexo-Admin-Deploy正确打开方式/</id>
    <published>2018-05-01T12:52:00.000Z</published>
    <updated>2018-05-01T13:19:23.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/jaredly/hexo-admin/issues/94" target="_blank" rel="noopener">hexo-admin/issues</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>由于Windows的某种原因，依据网站的大部分教程，均会抛出<code>deploy Error: spawn UNKNOWN</code>异常。而GitHub上issues给出了相关解决方案，现在总结一下具体的过程(填坑</p><h2 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h2><ul><li><p>打开站点配置文件(<code>\603773962.github.io\_config.yml</code>)，在<code>admin</code>中加入<code>deployCommand: &#39;sh hexo-deploy.sh&#39;</code>。示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin:</span><br><span class="line">  username: 看不见</span><br><span class="line">  password_hash: 看不见</span><br><span class="line">  secret: 看不见</span><br><span class="line">  deployCommand: &apos;sh hexo-deploy.sh&apos;</span><br></pre></td></tr></table></figure></li><li><p>在根目录中(<code>\xxxx.github.io\</code>)新建<code>hexo-deploy.sh</code>文件，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li><li><p>打开deploy.js(<code>\xxxx.github.io\node_modules\hexo-admin\deploy.js</code>)，将<code>var proc = spawn(command, [message], {detached: true});</code>更改为<code>var proc = spawn((process.platform === &quot;win32&quot; ? &quot;hexo.cmd&quot; : &quot;hexo&quot;), [&#39;d&#39;, &#39;-g&#39;]);</code><br>更改完后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function (command, message, done) &#123;</span><br><span class="line">  done = once(done);</span><br><span class="line">  var proc = spawn((process.platform === &quot;win32&quot; ? &quot;hexo.cmd&quot; : &quot;hexo&quot;), [&apos;d&apos;, &apos;-g&apos;]);</span><br><span class="line">  var stdout = &apos;&apos;;</span><br><span class="line">  var stderr = &apos;&apos;;</span><br><span class="line">  proc.stdout.on(&apos;data&apos;, function(data)&#123;stdout += data.toString()&#125;)</span><br><span class="line">  proc.stderr.on(&apos;data&apos;, function(data)&#123;stderr += data.toString()&#125;)</span><br><span class="line">  proc.on(&apos;error&apos;, function(err) &#123;</span><br><span class="line">    done(err, &#123;stdout: stdout, stderr: stderr&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  proc.on(&apos;close&apos;, function () &#123;</span><br><span class="line">    done(null, &#123;stdout: stdout, stderr: stderr&#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="http://hlx-blog.oss-cn-beijing.aliyuncs.com/18-5-1/52473923.jpg" alt="效果图"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jaredly/hexo-admin/issues/94&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="博客" scheme="http://inmyai.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="教程" scheme="http://inmyai.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Hexo" scheme="http://inmyai.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>NexT 底部logo栏更改教程</title>
    <link href="http://inmyai.com/2018/05/01/%E5%BA%95%E9%83%A8logo%E6%A0%8F%E6%9B%B4%E6%94%B9%E6%95%99%E7%A8%8B/"/>
    <id>http://inmyai.com/2018/05/01/底部logo栏更改教程/</id>
    <published>2018-05-01T12:41:00.000Z</published>
    <updated>2018-05-01T13:21:02.591Z</updated>
    
    <content type="html"><![CDATA[<p>1.从 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">图标库</a> 中挑选一款图标。<br>2.修改主题配置文件(<code>\xxxx.github.io\themes\next\_config.yml</code>)中footer.icon：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">footer:</span><br><span class="line">  icon: user</span><br></pre></td></tr></table></figure><p>将icon值改为图标的名称。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.从 &lt;a href=&quot;https://fontawesome.com/icons&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;图标库&lt;/a&gt; 中挑选一款图标。&lt;br&gt;2.修改主题配置文件(&lt;code&gt;\xxxx.github.io\themes\ne
      
    
    </summary>
    
      <category term="博客" scheme="http://inmyai.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="教程" scheme="http://inmyai.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="NexT" scheme="http://inmyai.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>NexT Live2D模块安装教程</title>
    <link href="http://inmyai.com/2018/05/01/Live2D-%E6%A8%A1%E5%9D%97%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>http://inmyai.com/2018/05/01/Live2D-模块安装教程/</id>
    <published>2018-05-01T11:55:00.000Z</published>
    <updated>2018-05-01T12:50:16.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p><code>npm install --save hexo-helper-live2d</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在站点配置文件(<code>\xxxx.github.io\_config.yml</code>)的尾部，加入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-koharu # 模型的名称</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: false # 手机是否显示，考虑手机的显示问题，可以选择false</span><br></pre></td></tr></table></figure></p><h2 id="安装模型"><a href="#安装模型" class="headerlink" title="安装模型"></a>安装模型</h2><p>从 <a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">模型库</a> 中找到一款喜欢的，然后<code>npm install live2d-widget-model-模型名称</code>进行安装，修改配置文件。<br>例如：看上初音未来的模型(<code>miku</code>)，则通过<code>npm install live2d-widget-model-miku</code>安装模型。然后修改站点配置文件中的model：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model:</span><br><span class="line">  use: live2d-widget-model-koharu</span><br></pre></td></tr></table></figure></p><p>修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">model:</span><br><span class="line">  use: live2d-widget-model-miku</span><br></pre></td></tr></table></figure></p><p>重启博客，就会发现右下角出现一只神奇的东西(斜眼笑.jpg)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装模块&quot;&gt;&lt;a href=&quot;#安装模块&quot; class=&quot;headerlink&quot; title=&quot;安装模块&quot;&gt;&lt;/a&gt;安装模块&lt;/h2&gt;&lt;p&gt;&lt;code&gt;npm install --save hexo-helper-live2d&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="博客" scheme="http://inmyai.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="教程" scheme="http://inmyai.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Live 2D" scheme="http://inmyai.com/tags/Live-2D/"/>
    
  </entry>
  
  <entry>
    <title> GitHub Pages 腾讯云CDN加速教程</title>
    <link href="http://inmyai.com/2018/04/30/GitHub-Pages-%E8%85%BE%E8%AE%AF%E4%BA%91CDN%E5%8A%A0%E9%80%9F%E6%95%99%E7%A8%8B/"/>
    <id>http://inmyai.com/2018/04/30/GitHub-Pages-腾讯云CDN加速教程/</id>
    <published>2018-04-30T12:48:00.000Z</published>
    <updated>2018-04-30T14:42:54.280Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>基于GitHub Pages搭建的博客是存储在GitHub服务器上，而GitHub Pages共用一台服务器，且服务器是在外国。因此，打开博客 = ppt演示。目前一种主流的方式是通过CDN提高网页的响应速度。</p><p>网络上有很多关于腾讯云CDN加速教程，但是不够详细，博主也因此折腾半天。现在，总结一下目前腾讯云CDN加速的具体流程。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>GitHub Pages 地址解析到个人域名(可以参照之前<a href="http://www.inmyai.com/2018/04/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/" target="_blank" rel="noopener">博客搭建指南</a>中的<a href="http://localhost:4000/admin/#/posts/cjgm8pvcs00004k7kbmzh5pwj" target="_blank" rel="noopener">基础教程</a>)</li></ul><h2 id="开始食用"><a href="#开始食用" class="headerlink" title="开始食用"></a>开始食用</h2><h3 id="1-开通腾讯云CDN服务，添加域名。"><a href="#1-开通腾讯云CDN服务，添加域名。" class="headerlink" title="1.开通腾讯云CDN服务，添加域名。"></a>1.开通<a href="https://console.cloud.tencent.com/cdn" target="_blank" rel="noopener">腾讯云CDN服务</a>，添加域名。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">域名:输入你自己的个人域名，wwww.xxxx.com</span><br><span class="line">源站设置:输入你GitHub Pages的ip地址，具体如下</span><br><span class="line">其他保持默认</span><br></pre></td></tr></table></figure><p>例如，我的GitHub Pages:hlxing.github.io，打开命令行，输入<code>ping hlxing.github.io</code></p><p><img src="http://hlx-blog.oss-cn-beijing.aliyuncs.com/18-4-30/37722924.jpg" alt="示例"><br>源站设置为: <code>185.199.110.153</code></p><h3 id="2-等待部署，然后获取CNAME，效果图："><a href="#2-等待部署，然后获取CNAME，效果图：" class="headerlink" title="2.等待部署，然后获取CNAME，效果图："></a>2.等待部署，然后获取CNAME，效果图：</h3><p><img src="http://hlx-blog.oss-cn-beijing.aliyuncs.com/18-4-30/78284969.jpg" alt="效果图"></p><p>CNAME为：<code>www.xxxx.com.cdn.dnsv1.com</code></p><h3 id="3-进入域名管理，点击解析，添加4条记录。"><a href="#3-进入域名管理，点击解析，添加4条记录。" class="headerlink" title="3.进入域名管理，点击解析，添加4条记录。"></a>3.进入<a href="https://console.cloud.tencent.com/domain" target="_blank" rel="noopener">域名管理</a>，点击解析，添加4条记录。</h3><ul><li><p>第一条(可选)：  </p><p><img src="http://hlx-blog.oss-cn-beijing.aliyuncs.com/18-4-30/47077302.jpg" alt="@"></p><p>主机记录选择 <code>@</code> ,映射xxxx.com<br>记录类型选择 <code>CNAME</code><br>线路类型选择 <code>国内</code>，只有国内进行访问时生效<br>记录值输入刚刚从CDN获取的<code>CNAME</code></p></li><li><p>第二条(必选):</p><p><img src="http://hlx-blog.oss-cn-beijing.aliyuncs.com/18-4-30/84970049.jpg" alt="www"></p><p>主机记录选择 <code>www</code> ,映射<a href="http://www.xxxx.com" target="_blank" rel="noopener">www.xxxx.com</a><br>记录类型选择 <code>CNAME</code><br>线路类型选择 <code>国内</code>，只有国内进行访问时生效<br>记录值输入刚刚从CDN获取的<code>CNAME</code></p></li><li><p>第三条(可选):</p><p><img src="http://hlx-blog.oss-cn-beijing.aliyuncs.com/18-4-30/87422341.jpg" alt="@国外"></p><p>主机记录选择 <code>@</code> ,映射xxxx.com<br>记录类型选择 <code>CNAME</code><br>线路类型选择 <code>国外</code>，只有国外进行访问时生效<br>记录值输入 自己的<code>GitHub Pages地址</code></p></li><li><p>第四条(必选):</p><p><img src="http://hlx-blog.oss-cn-beijing.aliyuncs.com/18-4-30/80226340.jpg" alt="www国外"></p><p>主机记录选择 <code>www</code> ,映射<a href="http://www.xxxx.com" target="_blank" rel="noopener">www.xxxx.com</a><br>记录类型选择 <code>CNAME</code><br>线路类型选择 <code>国外</code>，只有国外进行访问时生效<br>记录值输入 自己的<code>GitHub Pages地址</code></p></li><li><p>关于分国外国内：</p><p>GitHub Pages服务器在外国，用国内的CDN等于没有，且国外访问GitHub Pages是十分流畅的。</p></li></ul><h3 id="4-CDN验证"><a href="#4-CDN验证" class="headerlink" title="4.CDN验证"></a>4.CDN验证</h3><ul><li>打开命令行，输入 <code>ping xxxx.com</code> 或者 <code>www.xxxx.com</code>，如果出现的IP地址不是你GitHub Pages的ip地址，则CDN加速成功。如果没有，则可能是CDN还没有完成部署，或者域名解析还没完成(一般需要几分钟)。</li></ul><p><img src="http://hlx-blog.oss-cn-beijing.aliyuncs.com/18-4-30/76553225.jpg" alt="CDN验证"></p><h2 id="食用效果"><a href="#食用效果" class="headerlink" title="食用效果"></a>食用效果</h2><p>打开<a href="http://ping.chinaz.com" target="_blank" rel="noopener">站长之家的Ping检测</a>，输入<code>xxxx.com</code>，或<code>www.xxxx.com</code>，或<code>xxxx.github.io</code>。</p><p>原本是一只褐色的公鸡(尚未开启CDN加速):</p><p><img src="http://hlx-blog.oss-cn-beijing.aliyuncs.com/18-4-30/5166014.jpg" alt="褐色公鸡"></p><p>然后被绿了(开启CDN加速):</p><p><img src="http://hlx-blog.oss-cn-beijing.aliyuncs.com/18-4-30/2001038.jpg" alt="绿色公鸡"></p><p>可见，效果极佳！</p><ul><li>备注：检测<code>xxxx.github.io</code>时发现还是一只褐色公鸡？？但实际上，它会发生重定向(F12查询)，且重定向后的请求的Remote Address均是CDN加速所用的服务器，因此CDN效果依然存在。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;基于GitHub Pages搭建的博客是存储在GitHub服务器上，而GitHub Pages共用一台服务器，且服务器是在外国。因此，打开博
      
    
    </summary>
    
      <category term="博客" scheme="http://inmyai.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="教程" scheme="http://inmyai.com/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="CDN" scheme="http://inmyai.com/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建指南</title>
    <link href="http://inmyai.com/2018/04/29/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
    <id>http://inmyai.com/2018/04/29/博客搭建指南/</id>
    <published>2018-04-29T13:44:00.000Z</published>
    <updated>2018-05-01T11:54:45.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自己写一个博客系统吧？不存在的。<br>推荐一个快速搭建博客的方法，采用Hexo + GitHub Pages进行搭建，简单实用，而且不需要自己购买9块9包月的服务器。</p><h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><ul><li><a href="http://www.lovebxm.com/2017/05/30/buildBlog/" target="_blank" rel="noopener">基础教程</a>(大概需要20分钟，完成博客的基础模块，出自<strong>白小明</strong>大佬)</li><li><a href="https://www.jianshu.com/p/5973c05d7100" target="_blank" rel="noopener">进阶教程</a>(大概需要几个小时，扩展博客的功能，出自<strong>代码咖啡</strong>大佬)</li></ul><h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><ul><li>进阶教程中的搜索功能添加出现问题的话(我就是一个)，可以采用另一种方法：<br><a href="https://zty.js.org/post/2016/07/08/hexo-localsearch.html" target="_blank" rel="noopener">本地站内搜索</a>(出自<strong>Zetao Yang</strong>大佬)</li><li>更多扩展功能请自行百度</li></ul><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li>Live2D 模块安装教程(右下角那只宠物就是Live2D的产物</li><li>底部logo栏更改教程</li><li>Hexo-Admin后台管理中Deploy功能的正确打开方式(Windows 环境下)</li><li>腾讯云CDN加速教程</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;自己写一个博客系统吧？不存在的。&lt;br&gt;推荐一个快速搭建博客的方法，采用Hexo + GitHub Pages进行搭建，简单实用，而且不需要
      
    
    </summary>
    
      <category term="博客" scheme="http://inmyai.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="教程" scheme="http://inmyai.com/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>hello blog</title>
    <link href="http://inmyai.com/2018/04/27/hello-blog/"/>
    <id>http://inmyai.com/2018/04/27/hello-blog/</id>
    <published>2018-04-27T09:13:00.000Z</published>
    <updated>2018-04-29T07:56:11.773Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to my blog&lt;/p&gt;

      
    
    </summary>
    
      <category term="日志" scheme="http://inmyai.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="第一篇" scheme="http://inmyai.com/tags/%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    
  </entry>
  
</feed>
